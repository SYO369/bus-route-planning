import random

MIDDLE_NODE_COUNT = 9
MAX_LOOP_COUNT = 10
STOPPING_TIME = 1.5
#TOTAL_ROUTE_NUM = 20
TOTAL_ROUTE_SET = 20
VALID_ROUTE_SET = 10
TOTAL_BUS_NUM = 200
START_NODE = [1,7,9,14,16,20,23]
LAST_NODE = [24,25,26,27,28]
STOP_NODE = [2,3,4,5,6,8,10,11,12,13,15,17,18,19,21,22]

class Route1:
    stop = [20,19,"T",25]
    numOfBus = 12
    headway = 10.1
    tsw = 10.2

class Route2:
    stop = [16,17,18,23,22,21,"T",25]
    numOfBus = 17
    headway = 8.3
    tsw = 20

class Route3:
    stop = [1,6,9,10,12,13,19,21,"T",25]
    numOfBus = 19
    headway = 8.7
    tsw = 32.1

class Route4:
    stop = [14,13,12,10,8,16,17,18,23,22,"T",26]
    numOfBus = 18
    headway = 10.9
    tsw = 40.3

class Route5:
    stop = [1,6,8,16,17,18,23,22,23,"T",28]
    numOfBus = 30
    headway = 4.2
    tsw = 33.7

class Route6:
    stop = [9,10,11,5,6,8,16,17,18,23,22,"T",27]
    numOfBus = 16
    headway = 11.5
    tsw = 42

class Route7:
    stop = [16,17,18,23,22,21,"T",24]
    numOfBus = 19
    headway = 5.1
    tsw = 20

class Route8:
    stop = [7,6,1,2,3,4,11,12,13,19,"T",24]
    numOfBus = 11
    headway = 12.3
    tsw = 38.9

class Route9:
    stop = [1,6,5,4,11,12,13,19,"T",24]
    numOfBus = 23
    headway = 5.3
    tsw = 32.3

class Route10:
    stop = [14,15,8,9,10,12,13,19,"T",24]
    numOfBus = 11
    headway = 11.1
    tsw = 32.6

class EdgesTable():
    def __init__(self) -> None:
        self.edges = {
            "1-2": 2.5,
            "1-5": 2.5,
            "1-6": 2.8,
            "2-1": 2.5,
            "2-3": 1,
            "3-2": 1,
            "3-4": 2.9,
            "4-3": 2.9,
            "4-5": 2.4,
            "4-11": 1.8,
            "5-4": 2.4,
            "5-6": 2.2,
            "5-11": 2.2,
            "6-1": 2.8,
            "6-5": 2.2,
            "6-7": 1.8,
            "6-8": 3.1,
            "6-9": 3.9,
            "7-6": 1.8,
            "7-8": 1.5,
            "7-9": 1.7,
            "8-6": 3.1,
            "8-7": 1.5,
            "8-9": 1.7,
            "8-15": 2.6,
            "8-16": 3.5,
            "9-6": 2.9,
            "9-7": 1.7,
            "9-8": 1.7,
            "9-10": 2.5,
            "9-15": 1.9,
            "10-8": 4.2, # Added for no diectly route
            "10-9": 2.5,
            "10-11": 1.2,
            "10-12": 0.8,
            "10-14": 2.6,
            "10-15": 1.6,
            "11-4": 1.8,
            "11-5": 2.2,
            "11-10": 1.2,
            "11-12": 1.5,
            "12-10": 0.8,
            "12-11": 1.5,
            "12-13": 1.4,
            "13-12": 1.4,
            "13-14": 2.5,
            "13-19": 3.7,
            "14-10": 2.6,
            "14-13": 2.5,
            "14-15": 1.5,
            "14-19": 3.8,
            "15-8": 2.6,
            "15-9": 1.9,
            "15-10": 1.6,
            "15-14": 1.5,
            "15-16": 3.2,
            "16-8": 3.5,
            "16-15": 3.2,
            "16-17": 2.1,
            "17-16": 2.1,
            "17-18": 1.6,
            "17-19": 1.9,
            "18-17": 1.6,
            "18-19": 2.5,
            "18-23": 1.6,
            "19-13": 3.7,
            "19-14": 3.8,
            "19-17": 1.9,
            "19-18": 2.5,
            "19-20": 2.7,
            "19-21": 2.5,
            "19-T": 6,
            "20-19": 2.7,
            "21-19": 2.5,
            "21-22": 2.5,
            "21-T": 4,
            "22-21": 1.5,
            "22-23": 1.7,
            "22-T": 5.5, # Added for no directly route
            "23-18": 1.6,
            "23-22": 1.7,
            "T-24": 28.5,
            "T-25": 50.5,
            "T-26": 57.5,
            "T-27": 50,
            "T-28": 29
        }

    def get_travel_time(self, fromNode, toNode):
        time = self.edges.get(fromNode + "-" + toNode)
        if time is None:
            time = self.edges.get(toNode + "-" + fromNode)
        return time

    def insert_travel_time(self, fromNode, toNode, time):
        self.edges[str(fromNode) + "-" + str(toNode)] = time

TRAVEL_DEMAND = {
    "1-24": 595,
    "1-25": 372,
    "1-26": 256,
    "1-27": 192,
    "1-28": 441,
    "2-24": 167,
    "2-25": 99,
    "2-26": 97,
    "2-27": 46,
    "2-28": 162,
    "3-24": 147,
    "3-25": 100,
    "3-26": 97,
    "3-27": 57,
    "3-28": 164,
    "4-24": 106,
    "4-25": 57,
    "4-26": 53,
    "4-27": 29,
    "4-28": 92,
    "5-24": 313,
    "5-25": 187,
    "5-26": 196,
    "5-27": 114,
    "5-28": 301,
    "6-24": 270,
    "6-25": 194,
    "6-26": 179,
    "6-27": 95,
    "6-28": 336,
    "7-24": 349,
    "7-25": 192,
    "7-26": 178,
    "7-27": 94,
    "7-28": 307,
    "8-24": 313,
    "8-25": 191,
    "8-26": 179,
    "8-27": 97,
    "8-28": 345,
    "9-24": 298,
    "9-25": 158,
    "9-26": 124,
    "9-27": 71,
    "9-28": 254,
    "10-24": 104,
    "10-25": 62,
    "10-26": 48,
    "10-27": 33,
    "10-28": 101,
    "11-24": 60,
    "11-25": 36,
    "11-26": 35,
    "11-27": 21,
    "11-28": 70,
    "12-24": 485,
    "12-25": 337,
    "12-26": 287,
    "12-27": 142,
    "12-28": 488,
    "13-24": 547,
    "13-25": 264,
    "13-26": 226,
    "13-27": 158,
    "13-28": 423,
    "14-24": 196,
    "14-25": 120,
    "14-26": 92,
    "14-27": 62,
    "14-28": 177,
    "15-24": 316,
    "15-25": 203,
    "15-26": 158,
    "15-27": 82,
    "15-28": 276,
    "16-24": 784,
    "16-25": 425,
    "16-26": 375,
    "16-27": 258,
    "16-28": 629,
    "17-24": 87,
    "17-25": 52,
    "17-26": 50,
    "17-27": 30,
    "17-28": 81,
    "18-24": 237,
    "18-25": 158,
    "18-26": 147,
    "18-27": 79,
    "18-28": 211,
    "19-24": 107,
    "19-25": 63,
    "19-26": 57,
    "19-27": 30,
    "19-28": 90,
    "20-24": 186,
    "20-25": 98,
    "20-26": 77,
    "20-27": 55,
    "20-28": 147,
    "21-24": 113,
    "21-25": 58,
    "21-26": 57,
    "21-27": 32,
    "21-28": 83,
    "22-24": 104,
    "22-25": 63,
    "22-26": 51,
    "22-27": 35,
    "22-28": 87,
    "23-24": 638,
    "23-25": 461,
    "23-26": 369,
    "23-27": 197,
    "23-28": 617,
}

def get_travel_demand(i, j):
    return TRAVEL_DEMAND.get(i+"-"+j)

if __name__ == "__main__":
    print("constant.py")